%kSimPSF 'simulates widefield and confocal PSFs '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros SimPSF.pane file
%
% Parameters: 
% Double: lambdaEm 'Wavelength Emission [nm]', default: 488: 'emission wavelength in nanometers'
% Toggle: Pi4Em '4 Pi Emission', default: 0: 'If selected, the emission PSFs (widefield and confocal) will be affected accordingly'
% Double: na 'Numerical Apertur3e', default: 1.2: 'NA = n * sin (alpha)'
% Double: ri 'Refractive Index', default: 1.33: 'refractive index of the embedding medium and immersion medium of the lense (Water: 1.33, Oil: 1.516)'
% Integer: sX 'Size X', default: 256: 'Size of resulting dataset'
% Integer: sY 'Y', default: 256: 'Size of resulting dataset'
% Integer: sZ 'Z', default: 256: 'Size of resulting dataset'
% Double: scaleX 'Voxelsize X [nm]', default: 80: 'Size of a voxel in nm'
% Double: scaleY 'Y', default: 80: 'Size of a voxel in nm'
% Double: scaleZ 'Z', default: 160: 'Size of a voxel in nm'
% Double: lambdaEx 'Wavelength Excitation [nm]', default: 488: 'excitation wavelength in nanometers'
% Double: pinhole 'Pinhole Size [AU]', default: 1: 'Pinhole size in Airy Units ( 1 AU diameter is 2 * 0.61 lambda_mean / NA)'
% Toggle: confocal 'Confocal', default: 0: 'if selected a confocal PSF is computed'
% Toggle: nonorm 'NoNorm', default: 0: 'if selected the confocal PSF will not be normalized to one but the absobtion at the pinhole will be considered.'
% Toggle: Pi4Ex '4 Pi Excitation', default: 0: 'This will only influence 4Pi excitation in confocal mode (4Pi C and excitation only mode)'
% Toggle: computeASF 'Amplitude', default: 0: 'if selected a full vectorial Amplitude spread function will be computed. Excitation is assumed to be circular polarized for now.'
% Toggle: circPol 'Circular Polarization', default: 0: 'If selected, the incident polarization is assumed to be circular. The meaning of Ex,Ey,Ez has then changed: The components only correctly denote the degree of modulation in this direction so that the total intensity will be correct.'
% Toggle: scalarTheory 'Scalar Theory', default: 0: 'If selected, the high-NA scalar theory will be used. This means that the vectorial components of the light are not cosidered and only I0 is used. Furthermore the term (1+cos Theta) is replaced by 2 to yield energy conservation.'
% OutputFile: o 'Output', required: 'Resulting output data object'
%
% Example: o = kSimPSF( {'lambdaEm',488;'Pi4Em',0;'na',1.2;'ri',1.33;'sX',256;'sY',256;'sZ',256;'scaleX',80;'scaleY',80;'scaleZ',160;'lambdaEx',488;'pinhole',1;'confocal',0;'nonorm',0;'Pi4Ex',0;'computeASF',0;'circPol',0;'scalarTheory',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% SimPSF - simulates widefield and confocal PSFs
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = kSimPSF(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kSimPSF(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'lambdaEm', 488;'Pi4Em', 0;'na', 1.2;'ri', 1.33;'sX', 256;'sY', 256;'sZ', 256;'scaleX', 80;'scaleY', 80;'scaleZ', 160;'lambdaEx', 488;'pinhole', 1;'confocal', 0;'nonorm', 0;'Pi4Ex', 0;'computeASF', 0;'circPol', 0;'scalarTheory', 0;'o', '__output'};
maxval={0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0};
minval={0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0};
istoggle=[0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'Double','Toggle','Double','Double','Integer','Integer','Integer','Double','Double','Double','Double','Double','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
global KhorosRoot
if exist('KhorosRoot')
if ~isempty(KhorosRoot)
w=['"' KhorosRoot];
end
end
[varargout{:}]=callKhoros([w 'SimPSF"  -k'],Inputs,narglist);
